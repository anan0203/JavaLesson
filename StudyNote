一、HTML简介
	1、HTML（Hyper Text Markup Language）是一种标记语言
	2、HTML有很多标签，比如：标题<h1>~<h6>（<h1>定义最大标题，<h6>定义最小标题）,段落<p>,链接<a>,图像<img>，创建水平线<hr/>
	3、HTML元素以开始标签开始，以结束标签终止，可拥有属性。属性在开始标签中以名称/值对的形式出现，属性值应该被包括子啊引号内（双引号最常用，不过使用单引号也没问题，在个别情况下，如属性值本身含有双引号，那么必须使用单引号）
	4、不要忘记使用结束标签
	5、没有内容的HTML元素为空元素，例如：<br>定义换行
	6、HTML标签对大小写不敏感
	7、默认情况下，HTML会自动在块级元素前后添加一个额外的空行，比如段落、标题
	8、确保将 HTML heading 标签只用于标题。不要仅仅是为了产生粗体或大号的文本而使用标题
	9、注释：<!--注释-->
	10、<br />是一个空HTML元素，可插入单个折行（换行）
	11、当显示页面时，浏览器会移除源代码中多余的空格和空行。所有连续的空格或空行都会被算作一个空格
二、HTML&样式表
	1、三种方法插入样式表
		1)外部样式表：当样式需要被应用到很多页面的时候，外部样式表将是理想的选择。
		   <head>
		   <link rel="stylesheet" type="text/css" href="mystyle.csss">//link 定义资源引用
		   </head>
		2)内部样式表：当单个文件需要特别样式时，就可以使用内部样式表。
		   <head>
		   <style type="text/css">
		   body {background-color: red}
		   p {margin-left: 20px}
		   </style>
		   </head>
		3)内联样式：当特殊样式需要应用到个别元素时
		   <p style="color:red;margin-left:20px">
		   Paragraph
		   </p>
三、HTML标签
	1、HTML超链接：<a>标签
		1）使用href属性，创建指向另一个文档的链接
		   属性：target=“_blank”(新窗口打开)
		2）使用name属性，创建文档内的书签
		   name 属性规定锚（anchor）的名称，可以使用name属性创建HTML页面中的书签。
		   用id属性来替代name属性，命名锚同样有效。
		   <a name="tips">这是锚</a>
		   <a href="#tips">指向锚</a>
	2、图像标签：<img>,属性：src，alt（用来为图像定义一串预备的可替换的文本）。无闭合标签。
	   在浏览器无法载入图像时，替换文本属性告诉读者她们失去的信息。此时，浏览器将显示这个替代性的文本而不是图像。
	3、HTML表格
	   表格由<table>标签来定义，行<tr>,列<td>，表头<th>
	   属性：边框（border=“1”）。在空单元格中添加一个空格占位符，就可以将边框显示出来。
	4、无序列表：无序列表始于 <ul> 标签，每个列表项始于 <li>。
	5、有序列表：有序列表始于 <ol> 标签，每个列表项始于 <li> 标签。
	6、定义列表：自定义列表以 <dl> 标签开始，每个自定义列表项以 <dt> 开始，每个自定义列表项的定义以 <dd> 开始。
	7、块。块级元素在浏览器显示时，通常会以新行来开始（和结束）。
	   <div> 元素是块级元素，它是可用于组合其他 HTML 元素的容器。如果与 CSS 一同使用，<div> 元素可用于对大的内容块设置样式属性。<div> 元素的另一个常见的用途是文档布局。
	   <span> 元素是内联元素，可用作文本的容器。当与 CSS 一同使用时，<span> 元素可用于为部分文本设置样式属性。
	8、表单：表单使用表单标签（<form>）定义。
		多数情况下被用到的表单标签是输入标签（<input>）。输入类型是由类型属性（type）定义的
		文本输入：type="text"
		radio button：type="radio"
		checkbox：type="checkbox"
		表单的动作属性和确认按钮。当用户单击确认按钮时，表单的内容会被传送到另一个文件。表单的动作属性定义了目的文件的文件名。由动作属性定义的这个文件通常会对接收到的输入数据进行相关的处理。
		<form name="input" action="html_form_action.asp" method="get">
		Username: 
		<input type="text" name="user" />
		<input type="submit" value="Submit" />
		</form>
	9、框架
		垂直框架，水平框架
		框架结构标签（<frameset>）
		1）框架结构标签（<frameset>）定义如何将窗口分割为框架
		2）每个 frameset 定义了一系列行或列
		3）rows/columns 的值规定了每行或每列占据屏幕的面积
		框架标签（Frame），Frame 标签定义了放置在每个框架中的 HTML 文档。
		不能将 <body></body> 标签与 <frameset></frameset> 标签同时使用
	10、iframe 用于在网页内显示网页。
	11、背景颜色（Bgcolor）
		背景（Background）
	
四、CSS
	CSS 指层叠样式表 (Cascading Style Sheets)
	1、样式应用优先级（D优先级最高）
		A、浏览器缺省设置
		B、外部样式表
		C、内部样式表（位于 <head> 标签内部）
		D、内联样式（在 HTML 元素内部）
	2、CSS语法
		CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明。
		selector {declaration1; declaration2; ... declarationN }
		选择器通常是需要改变样式的 HTML 元素。每条声明由一个属性和一个值组成。
		可以对选择器进行分组，这样，被分组的选择器就可以分享相同的声明。用逗号将需要分组的选择器分开
	3、继承
		根据CSS，子元素从父元素继承属性。但是它并不总是按此方式工作
	4、派生选择器
		通过依据元素在其位置的上下文关系来定义样式，可以使标记更加简洁
		li strong {
		font-style: italic;
		font-weight: normal;
		}
		只有li元素中的strong元素的样式为斜体字
	5、id选择器（以#来定义）
		id 属性只能在每个 HTML 文档中出现一次
		#red {color:red;}
		在现代布局中，id 选择器常常用于建立派生选择器。
		#sidebar p {
		font-style: italic;
		text-align: right;
		margin-top: 0.5em;
		}
		上面的样式只会应用于出现在 id 是 sidebar 的元素内的段落。
	6、类选择器
		在 CSS 中，类选择器以一个点号显示   .center {text-align: center}
	7、CSS 属性选择器
		1）属性选择器
		[title]
		{
		color:red;
		}
		2）属性和值选择器
		[title=W3School]
		{
		border:5px solid blue;
		}
		3）属性和值选择器 - 多个值
		[title~=hello] { color:red; }
		为包含指定值的 title 属性的所有元素设置样式。适用于由空格分隔的属性值
	8、样式
		1）背景色：background-color
		2）背景图像：background-image
		3）背景重复：background-repeat（repeat-x 和 repeat-y，no-repeat ）
		4）背景定位：background-position
	9、文本
		1）缩进文本：text-indent    值为正或负或百分数，可继承
		2）水平对齐：text-align 值为left，right，center，justify（两端对齐）
		3）字间隔：word-spacing
		4）字母间隔：letter-spacing
	10、字体
		1）指定字体系列：font-family   建议在所有 font-family 规则中都提供一个通用字体系列
		2）字体风格：font-style  值为normal，italic，oblique
		3）设定小型大写字母：font-variant
		4）字体加粗：font-weight
		5）字体大小：font-size  1em=16px
	11、链接
		1）链接的4种状态：
			a:link - 普通的、未被访问的链接
			a:visited - 用户已访问的链接
			a:hover - 鼠标指针位于链接的上方
			a:active - 链接被点击的时刻
			a:hover 必须位于 a:link 和 a:visited 之后，a:active 必须位于 a:hover 之后
	12、CSS列表
		1）修改用于列表项的标志类型：list-style-type
		2）列表项图像：list-style-image
		3）列表项标志的位置：list-style-position
		4）简写属性：list-style
	13、CSS框模型
		1）内边距
		元素的内边距在边框和内容区之间。控制该区域最简单的属性是 padding 属性。
		可以按照上、右、下、左的顺序分别设置各边的内边距。若为百分数，百分数值是相对于其父元素的 width 计算的
		2）边框
		元素的边框 (border) 是围绕元素内容和内边距的一条或多条线。
		定义边框样式：border-style
		3）外边框
		设置外边距的最简单的方法就是使用 margin 属性
		4）css外边距合并
		当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。
	14、CSS元素选择器
		html {color:black;}
		h1 {color:blue;}
		h2 {color:silver;}
	15、选择器分组
		h2, p {color:gray;}
	16、CSS类选择器
		.important {color:red;}
		结合元素选择器：p.important {color:red;}
		多类选择器：
		<p class="important warning">
		This paragraph is a very important warning.
		</p>
	17、id选择器
		类选择器与ID选择器区别：
		区别 1：只能在文档中使用一次
		与类不同，在一个 HTML 文档中，ID 选择器会使用一次，而且仅一次。
		区别 2：不能使用 ID 词列表
		不同于类选择器，ID 选择器不能结合使用，因为 ID 属性不允许有以空格分隔的词列表。
		区别 3：ID 能包含更多含义
	18、属性选择器
五、JS
	1、JavaScript 是一种轻量级的编程语言，是可插入 HTML 页面的编程代码，插入 HTML 页面后，可由所有的现代浏览器执行
	2、简介
		1）写入HTML输出：document.write("<h1>This is a heading</h1>");
			只能在 HTML 输出中使用 document.write。如果在文档加载后使用该方法，会覆盖整个文档
		2）对事件作出反应
			<button type="button" onclick="alert('Welcome!')">点击这里</button>
		3）改变HTML内容
			x=document.getElementById("demo")  //查找元素
			x.innerHTML="Hello JavaScript";    //改变内容
		4）有序列表：有序列表始于0改变HTML图像
		5）改变HTML样式
			x=document.getElementById("demo")  //找到元素
			x.style.color="#ff0000";           //改变样式
		6）验证输入
			if isNaN(x) {alert("Not Numeric")};
	3、使用
		HTML 中的脚本必须位于 <script> 与 </script> 标签之间。
		脚本可被放置在 HTML 页面的 <body> 和 <head> 部分中。
		外部脚本不能包含 <script> 标签
	4、JS输出
		1）操作HTML元素
			如需从 JavaScript 访问某个 HTML 元素，可以使用 document.getElementById(id) 方法。
	5、JavaScript 对大小写敏感
	6、JavaScript 是脚本语言。浏览器会在读取代码时，逐行地执行脚本代码。而对于传统编程来说，会在执行前对所有代码进行编译。
	7、变量
		1）声明变量   var x=2；
		2）未使用值来声明的变量，其值实际上是 undefined
		3）如果重新声明 JavaScript 变量，该变量的值不会丢失
	8、数据类型
		1）JavaScript 拥有动态类型。这意味着相同的变量可用作不同的类型
		2）字符串
			var carname="Bill Gates";
			var carname='Bill Gates';
		3）数字
			JavaScript 只有一种数字类型。数字可以带小数点，也可以不带
		4）布尔值
		5）数组
		   A、var cars=new Array();
			  cars[0]="Audi";
			  cars[1]="BMW";
		   B、var cars=new Array("Audi","BMW","Volvo");
		   C、var cars=["Audi","BMW","Volvo"];
	    6）对象
			A、var person={firstname:"Bill", lastname:"Gates", id:5566};
		7）对象属性有两种寻址方式：
			name=person.lastname;
			name=person["lastname"];
		8）Undefined 这个值表示变量不含有值。可以通过将变量的值设置为 null 来清空变量。
		9）当声明新变量时，可以使用关键词 "new" 来声明其类型
		10）JavaScript 变量均为对象。当声明一个变量时，就创建了一个新的对象。
	9、对象
		1）在 JavaScript 中，对象是拥有属性和方法的数据。
		2）创建对象
			person=new Object();
			person.firstname="Bill";
			person.lastname="Gates";
			person.age=56;
			person.eyecolor="blue";
		3）访问对象的属性
			objectName.propertyName
		4）访问对象方法
			objectName.methodName()
	10、函数
		function functionname()
		{
			这里是要执行的代码
		}
		带参数：
		function myFunction(var1,var2)
		{
			这里是要执行的代码
		}
		返回值：
		function myFunction()
		{
			var x=5;
			return x;
		}
		JavaScript 变量的生存期：
		JavaScript 变量的生命期从它们被声明的时间开始。
		局部变量会在函数运行以后被删除。
		全局变量会在页面关闭后被删除。
		如果把值赋给尚未声明的变量，该变量将被自动作为全局变量声明。
	11、运算符
		如果把数字与字符串相加，结果将成为字符串。
	12、For/In 循环  该语句循环遍历对象的属性
			var person={fname:"John",lname:"Doe",age:25};

			for (x in person)
		   {
				txt=txt + person[x];
		   }
	13、表单验证
		用户是否已填写表单中的必填项目？
		用户输入的邮件地址是否合法？
		用户是否已输入合法的日期？
		用户是否在数据域 (numeric field) 中输入了文本？
	14、HTML DOM（Document Object Model）
		1、找到元素
			1）通过 id 查找 HTML 元素
				var x=document.getElementById("intro");
			2）通过标签名查找 HTML 元素
				var x=document.getElementById("main");
				var y=x.getElementsByTagName("p");
			3）通过类名找到 HTML 元素
		2、改变HTML 
			1)改变 HTML 输出流   document.write()
			2）改变 HTML 内容    innerHTML
			3）改变 HTML 属性    document.getElementById(id).attribute=new value
		3、改变CSS
			1、语法：document.getElementById(id).style.property=new style
				document.getElementById("p2").style.color="blue";
		4、事件
			1）onclick=JavaScript
			2）onload 和 onunload 事件
				onload 和 onunload 事件会在用户进入或离开页面时被触发。可用于处理 cookie。
			3）onchange事件
				onchange 事件常结合对输入字段的验证来使用
			4）onmouseover 和 onmouseout 事件
			5）onmousedown、onmouseup 以及 onclick 事件
				onmousedown, onmouseup 以及 onclick 构成了鼠标点击事件的所有部分。首先当点击鼠标按钮时，会触发 onmousedown 事件，当释放鼠标按钮时，会触发 onmouseup 事件，最后，当完成鼠标点击时，会触发 onclick 事件。
		5、添加和删除节点（HTML 元素）
			1）添加
				创建新的 <p> 元素：
				var para=document.createElement("p");
				创建文本节点：
				var node=document.createTextNode("这是新段落。");
				向 <p> 元素追加这个文本节点：
				para.appendChild(node);
				向一个已有的元素追加这个新元素：
				var element=document.getElementById("div1");
				element.appendChild(para);
			2）删除
				如需删除 HTML 元素，必须首先获得该元素的父元素：
				var parent=document.getElementById("div1");
				var child=document.getElementById("p1");
				parent.removeChild(child);
	15、对象
		1）创建新对象有两种不同的方法
			A、定义并创建对象的实例
				person=new Object();
				person.firstname="Bill";
				person.lastname="Gates";
				person.age=56;
				person.eyecolor="blue";
			B、使用函数来构造对象
				function person(firstname,lastname,age,eyecolor)
				{
					this.firstname=firstname;
					this.lastname=lastname;
					this.age=age;
					this.eyecolor=eyecolor;
				}
				一旦有了对象构造器，就可以创建新的对象实例
				var myFather=new person("Bill","Gates",56,"blue");
		2）把方法添加到 JavaScript 对象
		3）avaScript for...in 语句循环遍历对象的属性。
	16、数字
		1）所有 JavaScript 数字均为 64 位
	17、字符串
		String 对象用于处理已有的字符块。
	18、日期
		getTime()
		getTime() 返回从 1970 年 1 月 1 日至今的毫秒数。
		setFullYear()
		如何使用 setFullYear() 设置具体的日期。
		toUTCString()
		如何使用 toUTCString() 将当日的日期（根据 UTC）转换为字符串。
		getDay()
		如何使用 getDay() 和数组来显示星期，而不仅仅是数字。
		1)使用new来定义date对象
			var myDate=new Date() 
	19、数组
		var myArray=new Array()
	20、算数
		Math 对象提供多种算数值类型和函数。无需在使用这个对象之前对它进行定义。
	21、正则表达式
		1）通过 new 关键词来定义 RegExp 对象  var patt1=new RegExp("e");
		2）RegExp 对象有 3 个方法：test()、exec() 以及 compile()
		   A、test() 方法检索字符串中的指定值。返回值是 true 或 false。
		   B、exec() 方法检索字符串中的指定值。返回值是被找到的值。如果没有发现匹配，则返回 null。
		   C、compile() 既可以改变检索模式，也可以添加或删除第二个参数
	22、Window
		1）浏览器对象模型 (BOM)
			所有 JavaScript 全局对象、函数以及变量均自动成为 window 对象的成员。
			全局变量是 window 对象的属性。全局函数是 window 对象的方法。 HTML DOM 的 document 也是 window 对象的属性之一
			windows方法：
			window.open() - 打开新窗口
			window.close() - 关闭当前窗口
			window.moveTo() - 移动当前窗口
			window.resizeTo() - 调整当前窗口的尺寸
		2）Window Screen
			window.screen 对象在编写时可以不使用 window 这个前缀。
			属性：
			screen.availWidth - 可用的屏幕宽度
			screen.availHeight - 可用的屏幕高度
		3）Window Location
			window.location 对象在编写时可不使用 window 这个前缀。
			location.hostname 返回 web 主机的域名
			location.pathname 返回当前页面的路径和文件名
			location.port 返回 web 主机的端口 （80 或 443）
			location.protocol 返回所使用的 web 协议（http:// 或 https://）
			location.href 属性返回当前页面的 URL。
			location.assign() 方法加载新的文档。
		4）Window History
			window.history 对象在编写时可不使用 window 这个前缀。
			方法：
			history.back() - 与在浏览器点击后退按钮相同
			history.forward() - 与在浏览器中点击按钮向前相同
		5）Window Navigator
			window.navigator 对象在编写时可不使用 window 这个前缀。
			对象包含有关访问者浏览器的信息。
		6）消息框
			A、警告框
				alert("文本")
			B、确认框
				confirm("文本")
			C、提示框
				prompt("文本","默认值")
		7）计时  通过使用 JavaScript，我们有能力做到在一个设定的时间间隔之后来执行代码，而不是在函数被调用后立即执行。我们称之为计时事件。
			setTimeout()   未来的某时执行代码   var t=setTimeout("javascript语句",毫秒)
			clearTimeout()  取消setTimeout()
			要创建一个运行于无穷循环中的计时器，我们需要编写一个函数来调用其自身。
		8）Cookies
			cookie 是存储于访问者的计算机中的变量。每当同一台计算机通过浏览器请求某个页面时，就会发送这个 cookie。可以使用 JavaScript 来创建和取回 cookie 的值。
六、jQuery
	为了引用某个库，请使用 <script> 标签，其 src 属性设置为库的 URL
	主要的 jQuery 函数是 $() 函数
	1、基础语法是：$(selector).action()  jQuery 使用的语法是 XPath 与 CSS 选择器语法的组合
	2、实例中的所有 jQuery 函数位于一个 document ready 函数中，这是为了防止文档在完全加载（就绪）之前运行 jQuery 代码。
		$(document).ready(function(){

		--- jQuery functions go here ----

		});
	3、jQuery选择器
		1）jQuery元素选择器
			jQuery 使用 CSS 选择器来选取 HTML 元素。
			$("p") 选取 <p> 元素。
			$("p.intro") 选取所有 class="intro" 的 <p> 元素。
			$("p#demo") 选取所有 id="demo" 的 <p> 元素。
		2）jQuery 属性选择器
			jQuery 使用 XPath 表达式来选择带有给定属性的元素。
			$("[href]") 选取所有带有 href 属性的元素。
			$("[href='#']") 选取所有带有 href 值等于 "#" 的元素。
			$("[href!='#']") 选取所有带有 href 值不等于 "#" 的元素。
			$("[href$='.jpg']") 选取所有 href 值以 ".jpg" 结尾的元素。
		3）jQuery CSS 选择器
			jQuery CSS 选择器可用于改变 HTML 元素的 CSS 属性。
			$("p").css("background-color","red");
	4、jQuery 事件
		事件处理程序指的是当 HTML 中发生某些事件时所调用的方法。术语由事件“触发”（或“激发”）经常会被使用。
		遵循原则：
		把所有 jQuery 代码置于事件处理函数中
		把所有事件处理函数置于文档就绪事件处理器中
		把 jQuery 代码置于单独的 .js 文件中
		如果存在名称冲突，则重命名 jQuery 库
	5、效果
		1）jQuery hide() 和 show()
		语法：$(selector).hide(speed,callback);
			  $(selector).show(speed,callback);
			  可选的 speed 参数规定隐藏/显示的速度，可以取以下值："slow"、"fast" 或毫秒。
			  可选的 callback 参数是隐藏或显示完成后所执行的函数名称。
		2）通过 jQuery，可以使用 toggle() 方法来切换 hide() 和 show() 方法。
		   显示被隐藏的元素，并隐藏已显示的元素。
		   语法：$(selector).toggle(speed,callback);
		3）淡入淡出
			jQuery 拥有下面四种 fade 方法：
			fadeIn()  淡入已隐藏的元素   $(selector).fadeIn(speed,callback);
			fadeOut()
			fadeToggle()
			fadeTo()  允许渐变为给定的不透明度（值介于 0 与 1 之间） $(selector).fadeTo(speed,opacity,callback);
		4）滑动
			通过 jQuery，您可以在元素上创建滑动效果。
			jQuery 拥有以下滑动方法：
			slideDown()   $(selector).slideDown(speed,callback);
			slideUp()
			slideToggle()
		5）动画
			jQuery animate() 方法用于创建自定义动画。
			语法：
			$(selector).animate({params},speed,callback);
			如需对位置进行操作，要记得首先把元素的 CSS position 属性设置为 relative、fixed 或 absolute！
			当使用 animate() 时，必须使用 Camel 标记法书写所有的属性名，比如，必须使用 paddingLeft 而不是 padding-left，使用 marginRight 而不是 margin-right，等等
			也可以定义相对值（该值相对于元素的当前值）。需要在值的前面加上 += 或 -=
			可以把属性的动画值设置为 "show"、"hide" 或 "toggle"
			jQuery 提供针对动画的队列功能。
		6）stop（）
			语法：$(selector).stop(stopAll,goToEnd);
		7）Callback 函数
			Callback 函数在当前动画 100% 完成之后执行。
		8）Chaining
			Chaining 允许我们在一条语句中允许多个 jQuery 方法（在相同的元素上）
	6、HTML
		1）获得内容和属性
			text() - 设置或返回所选元素的文本内容
			html() - 设置或返回所选元素的内容（包括 HTML 标记）
			val() - 设置或返回表单字段的值
			attr() - 获取属性
		2）设置内容和属性
			text() - 设置或返回所选元素的文本内容
			html() - 设置或返回所选元素的内容（包括 HTML 标记）
			val() - 设置或返回表单字段的值
			attr() - 获取属性
			text()、html() 以及 val() 的回调函数
			回调函数由两个参数：被选元素列表中当前元素的下标，以及原始（旧的）值。然后以函数新值返回您希望使用的字符串。
		3）添加元素
			append() - 在被选元素的结尾插入内容
			prepend() - 在被选元素的开头插入内容
			after() - 在被选元素之后插入内容
			before() - 在被选元素之前插入内容
			我们创建若干个新元素。这些元素可以通过 text/HTML、jQuery 或者 JavaScript/DOM 来创建。然后我们通过 append() 方法把这些新元素追加到文本中（对 prepend() 同样有效）
			function appendText()
			{
				var txt1="<p>Text.</p>";               // 以 HTML 创建新元素
				var txt2=$("<p></p>").text("Text.");   // 以 jQuery 创建新元素
				var txt3=document.createElement("p");  // 以 DOM 创建新元素
				txt3.innerHTML="Text.";
				$("p").append(txt1,txt2,txt3);         // 追加新元素
			}
		4）删除元素
			remove() - 删除被选元素（及其子元素）
			empty() - 从被选元素中删除子元素
			过滤被删除的元素：$("p").remove(".italic");
		5）获取并设置 CSS 类
			addClass() - 向被选元素添加一个或多个类
			removeClass() - 从被选元素删除一个或多个类
			toggleClass() - 对被选元素进行添加/删除类的切换操作
			css() - 设置或返回样式属性
		6）css（）
			返回 CSS 属性：css("propertyname");
			设置 CSS 属性：css("propertyname","value");
			设置多个 CSS 属性：css({"propertyname":"value","propertyname":"value",...});
		7）尺寸
			width() 方法设置或返回元素的宽度（不包括内边距、边框或外边距）。
			height() 方法设置或返回元素的高度（不包括内边距、边框或外边距）。
			innerWidth() 方法返回元素的宽度（包括内边距）。
			innerHeight() 方法返回元素的高度（包括内边距）。
			outerWidth() 方法返回元素的宽度（包括内边距和边框）。
			outerHeight() 方法返回元素的高度（包括内边距和边框）。
	7、遍历
		1）向上遍历 DOM 树
			parent() 方法返回被选元素的直接父元素。
			parents() 方法返回被选元素的所有祖先元素，它一路向上直到文档的根元素 (<html>)。也可以使用可选参数来过滤对祖先元素的搜索。
			parentsUntil() 方法返回介于两个给定元素之间的所有祖先元素。	
		2）向下遍历 DOM 树
			children() 方法返回被选元素的所有直接子元素。该方法只会向下一级对 DOM 树进行遍历。也可以使用可选参数来过滤对子元素的搜索。
			 $("div").children("p.1");
			find() 方法返回被选元素的后代元素，一路向下直到最后一个后代。
		3）在 DOM 树中水平遍历
			siblings() 方法返回被选元素的所有同胞元素。也可以使用可选参数来过滤对同胞元素的搜索
			next() 方法返回被选元素的下一个同胞元素。
			nextAll() 方法返回被选元素的所有跟随的同胞元素。
			nextUntil() 方法返回介于两个给定参数之间的所有跟随的同胞元素。
		4）过滤
			first() 方法返回被选元素的首个元素。
			last() 方法返回被选元素的最后一个元素。
			eq() 方法返回被选元素中带有指定索引号的元素。索引号从 0 开始
			filter() 方法允许规定一个标准。不匹配这个标准的元素会被从集合中删除，匹配的元素会被返回。
			not() 方法返回不匹配标准的所有元素。
	8、AJAX
		1）AJAX load() 方法。从服务器加载数据，并把返回的数据放入被选元素中。
			$(selector).load(URL,data,callback);
			必需的 URL 参数规定希望加载的 URL。
			可选的 data 参数规定与请求一同发送的查询字符串键/值对集合。
			可选的 callback 参数是 load() 方法完成后所执行的函数名称。
			可选的 callback 参数规定当 load() 方法完成后所要允许的回调函数。回调函数可以设置不同的参数：
					responseTxt - 包含调用成功时的结果内容
					statusTXT - 包含调用的状态
					xhr - 包含 XMLHttpRequest 对象
		2）AJAX get() 和 post() 方法
			GET - 从指定的资源请求数据
			POST - 向指定的资源提交要处理的数据
			GET 基本上用于从服务器获得（取回）数据。注释：GET 方法可能返回缓存数据。
			POST 也可用于从服务器获取数据。不过，POST 方法不会缓存数据，并且常用于连同请求一起发送数据。	
			
